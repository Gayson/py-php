/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "HttpService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kUserOperationValues[] = {
  UserOperation::REGISTER,
  UserOperation::LOGIN,
  UserOperation::LOGOUT,
  UserOperation::MODIFY
};
const char* _kUserOperationNames[] = {
  "REGISTER",
  "LOGIN",
  "LOGOUT",
  "MODIFY"
};
const std::map<int, const char*> _UserOperation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kUserOperationValues, _kUserOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


User::~User() throw() {
}


void User::__set_id(const int64_t val) {
  this->id = val;
}

void User::__set_name(const std::string& val) {
  this->name = val;
}

void User::__set_phoneNumber(const std::string& val) {
  this->phoneNumber = val;
}

void User::__set_email(const std::string& val) {
  this->email = val;
}

void User::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNumber);
          this->__isset.phoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneNumber", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->phoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.phoneNumber, b.phoneNumber);
  swap(a.email, b.email);
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  id = other0.id;
  name = other0.name;
  phoneNumber = other0.phoneNumber;
  email = other0.email;
  password = other0.password;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  id = other1.id;
  name = other1.name;
  phoneNumber = other1.phoneNumber;
  email = other1.email;
  password = other1.password;
  __isset = other1.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "phoneNumber=" << to_string(phoneNumber);
  out << ", " << "email=" << to_string(email);
  out << ", " << "password="; (__isset.password ? (out << to_string(password)) : (out << "<null>"));
  out << ")";
}


Log::~Log() throw() {
}


void Log::__set_id(const int32_t val) {
  this->id = val;
}

void Log::__set_usr_id(const int64_t val) {
  this->usr_id = val;
}

void Log::__set_op(const UserOperation::type val) {
  this->op = val;
}

uint32_t Log::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->usr_id);
          this->__isset.usr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->op = (UserOperation::type)ecast2;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Log::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Log");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usr_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->usr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Log &a, Log &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.usr_id, b.usr_id);
  swap(a.op, b.op);
  swap(a.__isset, b.__isset);
}

Log::Log(const Log& other3) {
  id = other3.id;
  usr_id = other3.usr_id;
  op = other3.op;
  __isset = other3.__isset;
}
Log& Log::operator=(const Log& other4) {
  id = other4.id;
  usr_id = other4.usr_id;
  op = other4.op;
  __isset = other4.__isset;
  return *this;
}
void Log::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Log(";
  out << "id=" << to_string(id);
  out << ", " << "usr_id=" << to_string(usr_id);
  out << ", " << "op=" << to_string(op);
  out << ")";
}


AuthException::~AuthException() throw() {
}


void AuthException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void AuthException::__set_errorInfo(const std::string& val) {
  this->errorInfo = val;
}

uint32_t AuthException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorInfo);
          this->__isset.errorInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorInfo", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthException &a, AuthException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorInfo, b.errorInfo);
  swap(a.__isset, b.__isset);
}

AuthException::AuthException(const AuthException& other5) : TException() {
  errorCode = other5.errorCode;
  errorInfo = other5.errorInfo;
  __isset = other5.__isset;
}
AuthException& AuthException::operator=(const AuthException& other6) {
  errorCode = other6.errorCode;
  errorInfo = other6.errorInfo;
  __isset = other6.__isset;
  return *this;
}
void AuthException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "errorInfo=" << to_string(errorInfo);
  out << ")";
}

const char* AuthException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: AuthException";
  }
}


