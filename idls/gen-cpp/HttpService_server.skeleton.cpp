// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HttpService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class HttpServiceHandler : virtual public HttpServiceIf {
 public:
  HttpServiceHandler() {
    // Your initialization goes here
  }

  void uRegister(User& _return, const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password) {
    // Your implementation goes here
    printf("uRegister\n");
  }

  void uLogin(User& _return, const std::string& phoneNumber, const std::string& password) {
    // Your implementation goes here
    printf("uLogin\n");
  }

  void logout(const int32_t id) {
    // Your implementation goes here
    printf("logout\n");
  }

  void getUsersId(std::vector<int64_t> & _return) {
    // Your implementation goes here
    printf("getUsersId\n");
  }

  void getLogs(std::map<int32_t, Log> & _return, const int32_t count) {
    // Your implementation goes here
    printf("getLogs\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HttpServiceHandler> handler(new HttpServiceHandler());
  shared_ptr<TProcessor> processor(new HttpServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

