/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HttpService_TYPES_H
#define HttpService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct UserOperation {
  enum type {
    REGISTER = 1,
    LOGIN = 2,
    LOGOUT = 3,
    MODIFY = 4
  };
};

extern const std::map<int, const char*> _UserOperation_VALUES_TO_NAMES;

class User;

class Log;

class AuthException;

typedef struct _User__isset {
  _User__isset() : id(false), name(false), phoneNumber(false), email(false), password(false) {}
  bool id :1;
  bool name :1;
  bool phoneNumber :1;
  bool email :1;
  bool password :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : id(0), name(), phoneNumber(), email(), password() {
  }

  virtual ~User() throw();
  int64_t id;
  std::string name;
  std::string phoneNumber;
  std::string email;
  std::string password;

  _User__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_phoneNumber(const std::string& val);

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(email == rhs.email))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Log__isset {
  _Log__isset() : id(false), usr_id(false), op(false) {}
  bool id :1;
  bool usr_id :1;
  bool op :1;
} _Log__isset;

class Log : public virtual ::apache::thrift::TBase {
 public:

  Log(const Log&);
  Log& operator=(const Log&);
  Log() : id(0), usr_id(0), op((UserOperation::type)0) {
  }

  virtual ~Log() throw();
  int32_t id;
  int64_t usr_id;
  UserOperation::type op;

  _Log__isset __isset;

  void __set_id(const int32_t val);

  void __set_usr_id(const int64_t val);

  void __set_op(const UserOperation::type val);

  bool operator == (const Log & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(usr_id == rhs.usr_id))
      return false;
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const Log &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Log & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Log &a, Log &b);

inline std::ostream& operator<<(std::ostream& out, const Log& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AuthException__isset {
  _AuthException__isset() : errorCode(false), errorInfo(false) {}
  bool errorCode :1;
  bool errorInfo :1;
} _AuthException__isset;

class AuthException : public ::apache::thrift::TException {
 public:

  AuthException(const AuthException&);
  AuthException& operator=(const AuthException&);
  AuthException() : errorCode(0), errorInfo() {
  }

  virtual ~AuthException() throw();
  int32_t errorCode;
  std::string errorInfo;

  _AuthException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_errorInfo(const std::string& val);

  bool operator == (const AuthException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorInfo == rhs.errorInfo))
      return false;
    return true;
  }
  bool operator != (const AuthException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(AuthException &a, AuthException &b);

inline std::ostream& operator<<(std::ostream& out, const AuthException& obj)
{
  obj.printTo(out);
  return out;
}



#endif
