/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HttpService_H
#define HttpService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "HttpService_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HttpServiceIf {
 public:
  virtual ~HttpServiceIf() {}
  virtual void uRegister(User& _return, const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password) = 0;
  virtual void uLogin(User& _return, const std::string& phoneNumber, const std::string& password) = 0;
  virtual void logout(const int32_t id) = 0;
  virtual void getUsersId(std::vector<int64_t> & _return) = 0;
  virtual void getLogs(std::map<int32_t, Log> & _return, const int32_t count) = 0;
};

class HttpServiceIfFactory {
 public:
  typedef HttpServiceIf Handler;

  virtual ~HttpServiceIfFactory() {}

  virtual HttpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HttpServiceIf* /* handler */) = 0;
};

class HttpServiceIfSingletonFactory : virtual public HttpServiceIfFactory {
 public:
  HttpServiceIfSingletonFactory(const boost::shared_ptr<HttpServiceIf>& iface) : iface_(iface) {}
  virtual ~HttpServiceIfSingletonFactory() {}

  virtual HttpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HttpServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HttpServiceIf> iface_;
};

class HttpServiceNull : virtual public HttpServiceIf {
 public:
  virtual ~HttpServiceNull() {}
  void uRegister(User& /* _return */, const std::string& /* name */, const std::string& /* phoneNumber */, const std::string& /* email */, const std::string& /* password */) {
    return;
  }
  void uLogin(User& /* _return */, const std::string& /* phoneNumber */, const std::string& /* password */) {
    return;
  }
  void logout(const int32_t /* id */) {
    return;
  }
  void getUsersId(std::vector<int64_t> & /* _return */) {
    return;
  }
  void getLogs(std::map<int32_t, Log> & /* _return */, const int32_t /* count */) {
    return;
  }
};

typedef struct _HttpService_uRegister_args__isset {
  _HttpService_uRegister_args__isset() : name(false), phoneNumber(false), email(false), password(false) {}
  bool name :1;
  bool phoneNumber :1;
  bool email :1;
  bool password :1;
} _HttpService_uRegister_args__isset;

class HttpService_uRegister_args {
 public:

  HttpService_uRegister_args(const HttpService_uRegister_args&);
  HttpService_uRegister_args& operator=(const HttpService_uRegister_args&);
  HttpService_uRegister_args() : name(), phoneNumber(), email(), password() {
  }

  virtual ~HttpService_uRegister_args() throw();
  std::string name;
  std::string phoneNumber;
  std::string email;
  std::string password;

  _HttpService_uRegister_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_phoneNumber(const std::string& val);

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const HttpService_uRegister_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const HttpService_uRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_uRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_uRegister_pargs {
 public:


  virtual ~HttpService_uRegister_pargs() throw();
  const std::string* name;
  const std::string* phoneNumber;
  const std::string* email;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_uRegister_result__isset {
  _HttpService_uRegister_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _HttpService_uRegister_result__isset;

class HttpService_uRegister_result {
 public:

  HttpService_uRegister_result(const HttpService_uRegister_result&);
  HttpService_uRegister_result& operator=(const HttpService_uRegister_result&);
  HttpService_uRegister_result() {
  }

  virtual ~HttpService_uRegister_result() throw();
  User success;
  AuthException error;

  _HttpService_uRegister_result__isset __isset;

  void __set_success(const User& val);

  void __set_error(const AuthException& val);

  bool operator == (const HttpService_uRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const HttpService_uRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_uRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_uRegister_presult__isset {
  _HttpService_uRegister_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _HttpService_uRegister_presult__isset;

class HttpService_uRegister_presult {
 public:


  virtual ~HttpService_uRegister_presult() throw();
  User* success;
  AuthException error;

  _HttpService_uRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HttpService_uLogin_args__isset {
  _HttpService_uLogin_args__isset() : phoneNumber(false), password(false) {}
  bool phoneNumber :1;
  bool password :1;
} _HttpService_uLogin_args__isset;

class HttpService_uLogin_args {
 public:

  HttpService_uLogin_args(const HttpService_uLogin_args&);
  HttpService_uLogin_args& operator=(const HttpService_uLogin_args&);
  HttpService_uLogin_args() : phoneNumber(), password() {
  }

  virtual ~HttpService_uLogin_args() throw();
  std::string phoneNumber;
  std::string password;

  _HttpService_uLogin_args__isset __isset;

  void __set_phoneNumber(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const HttpService_uLogin_args & rhs) const
  {
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const HttpService_uLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_uLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_uLogin_pargs {
 public:


  virtual ~HttpService_uLogin_pargs() throw();
  const std::string* phoneNumber;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_uLogin_result__isset {
  _HttpService_uLogin_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _HttpService_uLogin_result__isset;

class HttpService_uLogin_result {
 public:

  HttpService_uLogin_result(const HttpService_uLogin_result&);
  HttpService_uLogin_result& operator=(const HttpService_uLogin_result&);
  HttpService_uLogin_result() {
  }

  virtual ~HttpService_uLogin_result() throw();
  User success;
  AuthException error;

  _HttpService_uLogin_result__isset __isset;

  void __set_success(const User& val);

  void __set_error(const AuthException& val);

  bool operator == (const HttpService_uLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const HttpService_uLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_uLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_uLogin_presult__isset {
  _HttpService_uLogin_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _HttpService_uLogin_presult__isset;

class HttpService_uLogin_presult {
 public:


  virtual ~HttpService_uLogin_presult() throw();
  User* success;
  AuthException error;

  _HttpService_uLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HttpService_logout_args__isset {
  _HttpService_logout_args__isset() : id(false) {}
  bool id :1;
} _HttpService_logout_args__isset;

class HttpService_logout_args {
 public:

  HttpService_logout_args(const HttpService_logout_args&);
  HttpService_logout_args& operator=(const HttpService_logout_args&);
  HttpService_logout_args() : id(0) {
  }

  virtual ~HttpService_logout_args() throw();
  int32_t id;

  _HttpService_logout_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const HttpService_logout_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const HttpService_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_logout_pargs {
 public:


  virtual ~HttpService_logout_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_getUsersId_args {
 public:

  HttpService_getUsersId_args(const HttpService_getUsersId_args&);
  HttpService_getUsersId_args& operator=(const HttpService_getUsersId_args&);
  HttpService_getUsersId_args() {
  }

  virtual ~HttpService_getUsersId_args() throw();

  bool operator == (const HttpService_getUsersId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HttpService_getUsersId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_getUsersId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_getUsersId_pargs {
 public:


  virtual ~HttpService_getUsersId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_getUsersId_result__isset {
  _HttpService_getUsersId_result__isset() : success(false) {}
  bool success :1;
} _HttpService_getUsersId_result__isset;

class HttpService_getUsersId_result {
 public:

  HttpService_getUsersId_result(const HttpService_getUsersId_result&);
  HttpService_getUsersId_result& operator=(const HttpService_getUsersId_result&);
  HttpService_getUsersId_result() {
  }

  virtual ~HttpService_getUsersId_result() throw();
  std::vector<int64_t>  success;

  _HttpService_getUsersId_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const HttpService_getUsersId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HttpService_getUsersId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_getUsersId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_getUsersId_presult__isset {
  _HttpService_getUsersId_presult__isset() : success(false) {}
  bool success :1;
} _HttpService_getUsersId_presult__isset;

class HttpService_getUsersId_presult {
 public:


  virtual ~HttpService_getUsersId_presult() throw();
  std::vector<int64_t> * success;

  _HttpService_getUsersId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HttpService_getLogs_args__isset {
  _HttpService_getLogs_args__isset() : count(false) {}
  bool count :1;
} _HttpService_getLogs_args__isset;

class HttpService_getLogs_args {
 public:

  HttpService_getLogs_args(const HttpService_getLogs_args&);
  HttpService_getLogs_args& operator=(const HttpService_getLogs_args&);
  HttpService_getLogs_args() : count(0) {
  }

  virtual ~HttpService_getLogs_args() throw();
  int32_t count;

  _HttpService_getLogs_args__isset __isset;

  void __set_count(const int32_t val);

  bool operator == (const HttpService_getLogs_args & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const HttpService_getLogs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_getLogs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HttpService_getLogs_pargs {
 public:


  virtual ~HttpService_getLogs_pargs() throw();
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_getLogs_result__isset {
  _HttpService_getLogs_result__isset() : success(false) {}
  bool success :1;
} _HttpService_getLogs_result__isset;

class HttpService_getLogs_result {
 public:

  HttpService_getLogs_result(const HttpService_getLogs_result&);
  HttpService_getLogs_result& operator=(const HttpService_getLogs_result&);
  HttpService_getLogs_result() {
  }

  virtual ~HttpService_getLogs_result() throw();
  std::map<int32_t, Log>  success;

  _HttpService_getLogs_result__isset __isset;

  void __set_success(const std::map<int32_t, Log> & val);

  bool operator == (const HttpService_getLogs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HttpService_getLogs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpService_getLogs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HttpService_getLogs_presult__isset {
  _HttpService_getLogs_presult__isset() : success(false) {}
  bool success :1;
} _HttpService_getLogs_presult__isset;

class HttpService_getLogs_presult {
 public:


  virtual ~HttpService_getLogs_presult() throw();
  std::map<int32_t, Log> * success;

  _HttpService_getLogs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HttpServiceClient : virtual public HttpServiceIf {
 public:
  HttpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HttpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void uRegister(User& _return, const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password);
  void send_uRegister(const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password);
  void recv_uRegister(User& _return);
  void uLogin(User& _return, const std::string& phoneNumber, const std::string& password);
  void send_uLogin(const std::string& phoneNumber, const std::string& password);
  void recv_uLogin(User& _return);
  void logout(const int32_t id);
  void send_logout(const int32_t id);
  void getUsersId(std::vector<int64_t> & _return);
  void send_getUsersId();
  void recv_getUsersId(std::vector<int64_t> & _return);
  void getLogs(std::map<int32_t, Log> & _return, const int32_t count);
  void send_getLogs(const int32_t count);
  void recv_getLogs(std::map<int32_t, Log> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HttpServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HttpServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HttpServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_uRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUsersId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLogs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HttpServiceProcessor(boost::shared_ptr<HttpServiceIf> iface) :
    iface_(iface) {
    processMap_["uRegister"] = &HttpServiceProcessor::process_uRegister;
    processMap_["uLogin"] = &HttpServiceProcessor::process_uLogin;
    processMap_["logout"] = &HttpServiceProcessor::process_logout;
    processMap_["getUsersId"] = &HttpServiceProcessor::process_getUsersId;
    processMap_["getLogs"] = &HttpServiceProcessor::process_getLogs;
  }

  virtual ~HttpServiceProcessor() {}
};

class HttpServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HttpServiceProcessorFactory(const ::boost::shared_ptr< HttpServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HttpServiceIfFactory > handlerFactory_;
};

class HttpServiceMultiface : virtual public HttpServiceIf {
 public:
  HttpServiceMultiface(std::vector<boost::shared_ptr<HttpServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HttpServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HttpServiceIf> > ifaces_;
  HttpServiceMultiface() {}
  void add(boost::shared_ptr<HttpServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void uRegister(User& _return, const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uRegister(_return, name, phoneNumber, email, password);
    }
    ifaces_[i]->uRegister(_return, name, phoneNumber, email, password);
    return;
  }

  void uLogin(User& _return, const std::string& phoneNumber, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uLogin(_return, phoneNumber, password);
    }
    ifaces_[i]->uLogin(_return, phoneNumber, password);
    return;
  }

  void logout(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout(id);
    }
    ifaces_[i]->logout(id);
  }

  void getUsersId(std::vector<int64_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUsersId(_return);
    }
    ifaces_[i]->getUsersId(_return);
    return;
  }

  void getLogs(std::map<int32_t, Log> & _return, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogs(_return, count);
    }
    ifaces_[i]->getLogs(_return, count);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HttpServiceConcurrentClient : virtual public HttpServiceIf {
 public:
  HttpServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HttpServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void uRegister(User& _return, const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password);
  int32_t send_uRegister(const std::string& name, const std::string& phoneNumber, const std::string& email, const std::string& password);
  void recv_uRegister(User& _return, const int32_t seqid);
  void uLogin(User& _return, const std::string& phoneNumber, const std::string& password);
  int32_t send_uLogin(const std::string& phoneNumber, const std::string& password);
  void recv_uLogin(User& _return, const int32_t seqid);
  void logout(const int32_t id);
  void send_logout(const int32_t id);
  void getUsersId(std::vector<int64_t> & _return);
  int32_t send_getUsersId();
  void recv_getUsersId(std::vector<int64_t> & _return, const int32_t seqid);
  void getLogs(std::map<int32_t, Log> & _return, const int32_t count);
  int32_t send_getLogs(const int32_t count);
  void recv_getLogs(std::map<int32_t, Log> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
